// Package pog provides a common interface for prime-order groups with strong
// discrete-logarithm problem.
package pog

import (
	"crypto/elliptic"
	"errors"
	"io"
	"math/big"

	"github.com/cloudflare/circl/ecc/p384"
)

// GID is the group idntifier.
type GID int

const (
	// P256 is the group generated by P-256 elliptic curve.
	P256 GID = iota
	// P384 is the group generated by P-384 elliptic curve.
	P384
	// P521 is the group generated by P-521 elliptic curve.
	P521
)

// GG represents an abstract prime-order group.
type GG interface {
	IsValid(a EE) bool
	IsIdentity(a EE) bool
	AreEqual(a, b EE) bool
	Add(a, b EE) EE
	Neg(a EE) EE
	Mul(a EE, n SC) EE
	MulGen(n SC) EE
	Generator() EE
	Identity() EE
	Order() *big.Int
	Marshal(a EE) []byte
	Unmarshal(b []byte) (EE, error)
	RandomEE(io.Reader) EE
	RandomSC(io.Reader) SC
}

// NewGroup returns a prime order group.
func NewGroup(id GID) GG {
	switch id {
	case P256:
		c := elliptic.P256()
		return wePog{c, c.Params().BitSize}
	case P384:
		c := p384.P384()
		return wePog{c, c.Params().BitSize}
	case P521:
		c := elliptic.P521()
		return wePog{c, c.Params().BitSize}
	default:
		panic(ErrNotSupported)
	}
}

// EE represents an abstract element of a prime-order group.
type EE interface{}

// SC represents an integer scalar.
type SC interface {
	Bytes() []byte
	Add(x, y SC)
	Sub(x, y SC)
	Mul(x, y SC)
	Neg(x SC)
	Inv(x SC)
}

var (
	// ErrScalar is
	ErrScalar error = errors.New("error scalar incompatible")
	// ErrNotSupported is
	ErrNotSupported error = errors.New("error group not supported")
	// ErrBadEE is
	ErrBadEE error = errors.New("bad element")
	// ErrUnmarshal is
	ErrUnmarshal error = errors.New("error unmarshaling")
)
