// Package group provides prime-order groups based on elliptic curves.
package group

import (
	"crypto/elliptic"
	"encoding"
	"errors"
	"io"

	"github.com/cloudflare/circl/ecc/p384"
)

var (
	// P256 is the group generated by P-256 elliptic curve.
	P256 Group = wG{elliptic.P256()}
	// P384 is the group generated by P-384 elliptic curve.
	P384 Group = wG{p384.P384()}
	// P521 is the group generated by P-521 elliptic curve.
	P521 Group = wG{elliptic.P521()}
)

// Group represents a prime-order group based on elliptic curves.
type Group interface {
	NewElement() Element
	NewScalar() Scalar
	Identity() Element
	Generator() Element
	Order() Scalar
	Hashes([]byte) Hasher
	Random() Randomizer
}

// Element represents an abstract element of a prime-order group.
type Element interface {
	IsIdentity() bool
	IsEqual(Element) bool
	Add(Element, Element) Element
	Dbl(Element) Element
	Neg(Element) Element
	Mul(Element, Scalar) Element
	MulGen(Scalar) Element
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
	MarshalBinaryCompress() ([]byte, error)
}

// Scalar represents an integer scalar.
type Scalar interface {
	IsEqual(Scalar) bool
	Add(Scalar, Scalar) Scalar
	Sub(Scalar, Scalar) Scalar
	Mul(Scalar, Scalar) Scalar
	Neg(Scalar) Scalar
	Inv(Scalar) Scalar
	encoding.BinaryMarshaler
	encoding.BinaryUnmarshaler
}

// Randomizer allows to get random group elements and scalars.
type Randomizer interface {
	RandomElement(io.Reader) Element
	RandomScalar(io.Reader) Scalar
}

// Hasher allows to hash byte strings into group elements and scalars.
type Hasher interface {
	EncodeToElement([]byte) Element
	HashToElement([]byte) Element
	HashToScalar([]byte) Scalar
}

var (
	ErrType      = errors.New("type mismatch")
	ErrUnmarshal = errors.New("error unmarshaling")
)
