// Package group provides a common interface for prime-order groups with strong
// diScalarrete-logarithm problem.
package group

import (
	"crypto/elliptic"
	"errors"
	"io"
	"math/big"

	"github.com/cloudflare/circl/ecc/p384"
)

// GroupID is the group identifier.
type GroupID int

const (
	// P256 is the group generated by P-256 elliptic curve.
	P256 GroupID = iota
	// P384 is the group generated by P-384 elliptic curve.
	P384
	// P521 is the group generated by P-521 elliptic curve.
	P521
)

// Group represents an abstract prime-order group.
type Group interface {
	IsValid(a Element) bool
	IsIdentity(a Element) bool
	AreEqual(a, b Element) bool
	Add(a, b Element) Element
	Neg(a Element) Element
	Mul(a Element, n Scalar) Element
	MulGen(n Scalar) Element
	Generator() Element
	Identity() Element
	Order() *big.Int
	Marshal(a Element) []byte
	Unmarshal(b []byte) (Element, error)
	RandomElement(io.Reader) Element
	RandomScalar(io.Reader) Scalar
}

// NewGroup returns a prime order group.
func NewGroup(id GroupID) Group {
	switch id {
	case P256:
		c := elliptic.P256()
		return wePog{c, c.Params().BitSize}
	case P384:
		c := p384.P384()
		return wePog{c, c.Params().BitSize}
	case P521:
		c := elliptic.P521()
		return wePog{c, c.Params().BitSize}
	default:
		panic(ErrNotSupported)
	}
}

// Element represents an abstract element of a prime-order group.
type Element interface{}

// Scalar represents an integer Scalaralar.
type Scalar interface {
	Bytes() []byte
	Add(x, y Scalar)
	Sub(x, y Scalar)
	Mul(x, y Scalar)
	Neg(x Scalar)
	Inv(x Scalar)
}

var (
	// ErrScalar is
	ErrScalar error = errors.New("error Scalar incompatible")
	// ErrNotSupported is
	ErrNotSupported error = errors.New("error group not supported")
	// ErrBadElement is
	ErrBadElement error = errors.New("bad element")
	// ErrUnmarshal is
	ErrUnmarshal error = errors.New("error unmarshaling")
)
